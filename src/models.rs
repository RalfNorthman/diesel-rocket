// Generated by diesel_ext
#![allow(unused)]
#![allow(clippy::all)]

use crate::schema::*;
use chrono::NaiveDate;


#[derive(Queryable, Debug, Identifiable)]
#[primary_key(author_id)]
pub struct Author {
    pub author_id: i32,
    pub author_canonical: Option<String>,
    pub author_legalname: Option<String>,
    pub author_birthplace: Option<String>,
    pub author_birthdate: Option<NaiveDate>,
    pub author_deathdate: Option<NaiveDate>,
    pub note_id: Option<i32>,
    pub author_wikipedia: Option<String>,
    pub author_views: Option<i32>,
    pub author_imdb: Option<String>,
    pub author_marque: i32,
    pub author_image: Option<String>,
    pub author_annualviews: i32,
    pub author_lastname: Option<String>,
    pub author_language: Option<i32>,
    pub author_note: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "authors_by_debut_date"]
#[primary_key(row_id)]
pub struct AuthorByDebutDate {
    pub row_id: i32,
    pub debut_year: Option<i32>,
    pub author_id: Option<i32>,
    pub title_count: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(award_id)]
pub struct Award {
    pub award_id: i32,
    pub award_title: Option<String>,
    pub award_author: Option<String>,
    pub award_year: Option<NaiveDate>,
    pub award_ttype: Option<String>,
    pub award_atype: Option<String>,
    pub award_level: Option<String>,
    pub award_movie: Option<String>,
    pub award_type_id: Option<i32>,
    pub award_cat_id: Option<i32>,
    pub award_note_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(award_cat_id)]
pub struct AwardCat {
    pub award_cat_id: i32,
    pub award_cat_name: Option<String>,
    pub award_cat_type_id: Option<i32>,
    pub award_cat_order: Option<i32>,
    pub award_cat_note_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[table_name = "award_titles_report"]
#[primary_key(award_title_id)]
pub struct AwardTitleReport {
    pub award_title_id: i32,
    pub title_id: Option<i32>,
    pub score: Option<i32>,
    pub year: Option<i32>,
    pub decade: Option<String>,
    pub title_type: Option</* TODO: unknown type Nullable<Enum> */>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(award_type_id)]
pub struct AwardType {
    pub award_type_id: i32,
    pub award_type_code: Option<String>,
    pub award_type_name: Option<String>,
    pub award_type_wikipedia: Option<String>,
    pub award_type_note_id: Option<i32>,
    pub award_type_by: Option<String>,
    pub award_type_for: Option<String>,
    pub award_type_short_name: Option<String>,
    pub award_type_poll: Option</* TODO: unknown type Nullable<Enum> */>,
    pub award_type_non_genre: Option</* TODO: unknown type Nullable<Enum> */>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pub_id)]
pub struct BadImage {
    pub pub_id: i32,
    pub image_url: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(ca_id)]
pub struct CanonicalAuthor {
    pub ca_id: i32,
    pub title_id: Option<i32>,
    pub author_id: Option<i32>,
    pub ca_status: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(change_id)]
pub struct ChangedVerifiedPub {
    pub change_id: i32,
    pub pub_id: Option<i32>,
    pub sub_id: Option<i32>,
    pub verifier_id: Option<i32>,
    pub change_time: Option</* TODO: unknown type Nullable<Datetime> */>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(cleanup_id)]
pub struct Cleanup {
    pub cleanup_id: i32,
    pub record_id: Option<i32>,
    pub report_type: Option<i32>,
    pub resolved: Option<bool>,
    pub record_id_2: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(directory_id)]
pub struct Directory {
    pub directory_id: i32,
    pub directory_mask: Option<i32>,
    pub directory_index: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(email_id)]
pub struct Email {
    pub email_id: i32,
    pub author_id: Option<i32>,
    pub email_address: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(history_id)]
pub struct History {
    pub history_id: i32,
    pub history_time: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub history_table: Option<i32>,
    pub history_record: Option<i32>,
    pub history_field: Option<i32>,
    pub history_submission: Option<i32>,
    pub history_submitter: i32,
    pub history_reviewer: i32,
    pub history_from: Option<String>,
    pub history_to: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(identifier_id)]
pub struct Identifier {
    pub identifier_id: i32,
    pub identifier_type_id: Option<i32>,
    pub identifier_value: Option<String>,
    pub pub_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(identifier_site_id)]
pub struct IdentifierSite {
    pub identifier_site_id: i32,
    pub identifier_type_id: Option<i32>,
    pub site_position: Option<u8>,
    pub site_url: Option<String>,
    pub site_name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(identifier_type_id)]
pub struct IdentifierType {
    pub identifier_type_id: i32,
    pub identifier_type_name: Option<String>,
    pub identifier_type_full_name: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(lang_id)]
pub struct Language {
    pub lang_id: i32,
    pub lang_name: Option<String>,
    pub lang_code: Option<String>,
    pub latin_script: Option</* TODO: unknown type Nullable<Enum> */>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(key_id)]
pub struct LicenseKey {
    pub key_id: i32,
    pub user_id: Option<i32>,
    pub license_key: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(Mag_Code)]
pub struct Magazine {
    pub Mag_Code: String,
    pub Mag_Name: String,
    pub Mag_Desc: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(most_reviewed_id)]
pub struct MostReviewed {
    pub most_reviewed_id: i32,
    pub title_id: Option<i32>,
    pub year: Option<i32>,
    pub decade: Option<String>,
    pub reviews: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(user_id)]
pub struct MwUser {
    pub user_id: /* TODO: unknown type Unsigned<Integer> */,
    pub user_name: String,
    pub user_real_name: String,
    pub user_password: /* TODO: unknown type Tinyblob */,
    pub user_newpassword: /* TODO: unknown type Tinyblob */,
    pub user_email: String,
    pub user_options: /* TODO: unknown type Blob */,
    pub user_touched: String,
    pub user_token: String,
    pub user_email_authenticated: Option</* TODO: unknown type Nullable<Binary> */>,
    pub user_email_token: Option</* TODO: unknown type Nullable<Binary> */>,
    pub user_email_token_expires: Option</* TODO: unknown type Nullable<Binary> */>,
    pub user_registration: Option</* TODO: unknown type Nullable<Binary> */>,
    pub user_newpass_time: Option</* TODO: unknown type Nullable<Binary> */>,
    pub user_editcount: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(ug_user, ug_group)]
pub struct MwUserGroup {
    pub ug_user: /* TODO: unknown type Unsigned<Integer> */,
    pub ug_group: /* TODO: unknown type Varbinary */,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(note_id)]
pub struct Note {
    pub note_id: i32,
    pub note_note: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(verification_id)]
pub struct PrimaryVerification {
    pub verification_id: i32,
    pub pub_id: Option<i32>,
    pub user_id: Option<i32>,
    pub ver_time: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub ver_transient: Option<u8>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pseudo_id)]
pub struct Pseudonym {
    pub pseudo_id: i32,
    pub author_id: Option<i32>,
    pub pseudonym: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(publisher_id)]
pub struct Publisher {
    pub publisher_id: i32,
    pub publisher_name: Option<String>,
    pub publisher_wikipedia: Option<String>,
    pub note_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pub_id)]
pub struct Pub {
    pub pub_id: i32,
    pub pub_title: Option<String>,
    pub pub_tag: Option<String>,
    pub pub_year: Option<NaiveDate>,
    pub publisher_id: Option<i32>,
    pub pub_pages: Option<String>,
    pub pub_ptype: Option<String>,
    pub pub_ctype: Option</* TODO: unknown type Nullable<Enum> */>,
    pub pub_isbn: Option<String>,
    pub pub_frontimage: Option<String>,
    pub pub_price: Option<String>,
    pub note_id: Option<i32>,
    pub pub_series_id: Option<i32>,
    pub pub_series_num: Option<String>,
    pub pub_catalog: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pa_id)]
pub struct PubAuthor {
    pub pa_id: i32,
    pub pub_id: Option<i32>,
    pub author_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pubc_id)]
pub struct PubContent {
    pub pubc_id: i32,
    pub title_id: Option<i32>,
    pub pub_id: Option<i32>,
    pub pubc_page: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(pub_series_id)]
pub struct PubSery {
    pub pub_series_id: i32,
    pub pub_series_name: Option<String>,
    pub pub_series_wikipedia: Option<String>,
    pub pub_series_note_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(reference_id)]
pub struct Reference {
    pub reference_id: i32,
    pub reference_label: Option<String>,
    pub reference_fullname: Option<String>,
    pub pub_id: Option<i32>,
    pub reference_url: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(row_id)]
pub struct Report {
    pub row_id: i32,
    pub report_id: Option<i32>,
    pub report_param: Option<i32>,
    pub report_data: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(series_id)]
pub struct Sery {
    pub series_id: i32,
    pub series_title: Option<String>,
    pub series_parent: Option<i32>,
    pub series_type: Option<i32>,
    pub series_parent_position: Option<i32>,
    pub series_note_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(sfe3_authors_id)]
pub struct Sfe3Author {
    pub sfe3_authors_id: i32,
    pub url: Option<String>,
    pub author_name: Option<String>,
    pub resolved: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(sub_id)]
pub struct Submission {
    pub sub_id: i32,
    pub sub_state: Option</* TODO: unknown type Nullable<Enum> */>,
    pub sub_type: Option<i32>,
    pub sub_data: Option<String>,
    pub sub_time: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub sub_reviewed: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub sub_submitter: i32,
    pub sub_reviewer: i32,
    pub sub_reason: Option<String>,
    pub sub_holdid: i32,
    pub affected_record_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(tag_id)]
pub struct Tag {
    pub tag_id: i32,
    pub tag_name: Option<String>,
    pub tag_status: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(tagmap_id)]
pub struct TagMapping {
    pub tagmap_id: i32,
    pub tag_id: Option<i32>,
    pub title_id: Option<i32>,
    pub user_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(title_id)]
pub struct Title {
    pub title_id: i32,
    pub title_title: Option<String>,
    pub title_translator: Option<String>,
    pub title_synopsis: Option<i32>,
    pub note_id: Option<i32>,
    pub series_id: Option<i32>,
    pub title_seriesnum: Option<i32>,
    pub title_copyright: Option<NaiveDate>,
    pub title_storylen: Option<String>,
    pub title_ttype: Option</* TODO: unknown type Nullable<Enum> */>,
    pub title_wikipedia: Option<String>,
    pub title_views: i32,
    pub title_parent: i32,
    pub title_rating: Option<f32>,
    pub title_annualviews: i32,
    pub title_ctl: /* TODO: unknown type Unsigned<Integer> */,
    pub title_language: Option<i32>,
    pub title_seriesnum_2: Option<String>,
    pub title_non_genre: Option</* TODO: unknown type Nullable<Enum> */>,
    pub title_graphic: Option</* TODO: unknown type Nullable<Enum> */>,
    pub title_nvz: Option</* TODO: unknown type Nullable<Enum> */>,
    pub title_jvn: Option</* TODO: unknown type Nullable<Enum> */>,
    pub title_content: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(taw_id)]
pub struct TitleAward {
    pub taw_id: i32,
    pub award_id: Option<i32>,
    pub title_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(tr_id)]
pub struct TitleRelationship {
    pub tr_id: i32,
    pub title_id: Option<i32>,
    pub review_id: Option<i32>,
    pub series_id: Option<i32>,
    pub translation_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_author_id)]
pub struct TransAuthor {
    pub trans_author_id: i32,
    pub trans_author_name: Option<String>,
    pub author_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_legal_name_id)]
pub struct TransLegalName {
    pub trans_legal_name_id: i32,
    pub trans_legal_name: Option<String>,
    pub author_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_publisher_id)]
pub struct TransPublisher {
    pub trans_publisher_id: i32,
    pub trans_publisher_name: Option<String>,
    pub publisher_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_pub_id)]
pub struct TransPub {
    pub trans_pub_id: i32,
    pub trans_pub_title: Option<String>,
    pub pub_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_pub_series_id)]
pub struct TransPubSery {
    pub trans_pub_series_id: i32,
    pub trans_pub_series_name: Option<String>,
    pub pub_series_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_series_id)]
pub struct TransSery {
    pub trans_series_id: i32,
    pub trans_series_name: Option<String>,
    pub series_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(trans_title_id)]
pub struct TransTitle {
    pub trans_title_id: i32,
    pub trans_title_title: Option<String>,
    pub title_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(user_lang_id)]
pub struct UserLanguage {
    pub user_lang_id: i32,
    pub user_id: Option<i32>,
    pub lang_id: Option<i32>,
    pub user_choice: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(user_pref_id)]
pub struct UserPreference {
    pub user_pref_id: i32,
    pub user_id: Option<i32>,
    pub concise_disp: Option<i32>,
    pub display_all_languages: Option</* TODO: unknown type Nullable<Enum> */>,
    pub default_language: Option<i32>,
    pub covers_display: Option<bool>,
    pub suppress_translation_warnings: Option<bool>,
    pub suppress_bibliographic_warnings: Option<bool>,
    pub cover_links_display: Option<bool>,
    pub keep_spaces_in_searches: Option<bool>,
    pub suppress_help_bubbles: Option<bool>,
    pub suppress_awards: Option<bool>,
    pub suppress_reviews: Option<bool>,
    pub display_post_submission: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(user_site_id)]
pub struct UserSite {
    pub user_site_id: i32,
    pub site_id: Option<i32>,
    pub user_id: Option<i32>,
    pub user_choice: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(user_status_id)]
pub struct UserStatu {
    pub user_status_id: i32,
    pub user_id: Option<i32>,
    pub last_changed_ver_pubs: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub last_viewed_ver_pubs: Option</* TODO: unknown type Nullable<Datetime> */>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(verification_id)]
pub struct Verification {
    pub verification_id: i32,
    pub pub_id: Option<i32>,
    pub reference_id: Option<i32>,
    pub user_id: Option<i32>,
    pub ver_time: Option</* TODO: unknown type Nullable<Datetime> */>,
    pub ver_status: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(vote_id)]
pub struct Vote {
    pub vote_id: i32,
    pub title_id: Option<i32>,
    pub user_id: Option<i32>,
    pub rating: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(webpage_id)]
pub struct Webpage {
    pub webpage_id: i32,
    pub author_id: Option<i32>,
    pub publisher_id: Option<i32>,
    pub url: Option<String>,
    pub pub_series_id: Option<i32>,
    pub title_id: Option<i32>,
    pub award_type_id: Option<i32>,
    pub series_id: Option<i32>,
    pub award_cat_id: Option<i32>,
    pub pub_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[primary_key(site_id)]
pub struct Website {
    pub site_id: i32,
    pub site_name: Option<String>,
    pub site_url: Option<String>,
    pub site_isbn13: Option<u8>,
}

